pub fn uuid(int length) -> char*:
    $raw (
        #include <sys/time.h> 
        #include <time.h>
        static char buffer[64];
        static const char chars[] = "0123456789abcdefghijklmnopqrstuvwxyz";
        if (length > 63) return NULL;
        struct timeval tv;
        gettimeofday(&tv, NULL);
        unsigned int seed = (unsigned int)(tv.tv_sec * 1000 + tv.tv_usec / 1000);
        srand(seed);
        for (int i = 0; i < length - 1; ++i) {
            buffer[i] = chars[rand() % 36];
        }
        buffer[length - 1] = '\0';
        return buffer;
    )

pub fn num(int x, int y) -> int:
    int g_seed = 0
    if g_seed == 0:
        $raw (
            #ifdef _WIN32
                extern unsigned long __stdcall GetTickCount(void);
                g_seed = (int)GetTickCount();
            #else
                #include <unistd.h>
                #include <sys/syscall.h>
                struct { long tv_sec; long tv_usec; } tv;
                syscall(SYS_gettimeofday, &tv, 0);
                g_seed = (int)(tv.tv_sec * 1000 + tv.tv_usec / 1000);
            #endif
        )
    g_seed = g_seed ^ (g_seed << 13)
    g_seed = g_seed ^ (g_seed >> 17)
    g_seed = g_seed ^ (g_seed << 5)
    if g_seed < 0:
        g_seed = -g_seed
    if x > y:
        int temp = x
        x = y
        y = temp
    return x + (g_seed % (y - x + 1))

## Random boolean value
## Returns true or false with equal probability
pub fn boolean() -> bool:
    return random::num(0, 1)

## Random float between 0.0 and 1.0
pub fn floatb() -> float:
    return float(random::num(0, 32767)) / 32767.0

## Random float between x and y
pub fn float_range(float x, float y) -> float:
    float t = random::floatb()
    return x + t * (y - x)
