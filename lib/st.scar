import "std/collections"
import "std/math"
import "std/strings"
import "std/test"
import "std/os"

# Setup
var list = new collections::ArrayList(4)

list.add_element(10)
list.add_element(20)
list.add_element(30)

var t = new test::UnitTest()
int size = list.get_size()

# Collections Tests
t.assert_equals(3, size, "List size should be 3")

# Math Tests
t.assert_float_equals(3.14, math::round(3.14159265359, 2), 0.01, "Rounding error should be within tolerance")
t.assert_equals(0, math::asin(2.0), "asin(2.0) should return 0.0")
t.assert_equals(0, math::acos(2.0), "acos(2.0) should return 0.0")
t.assert_equals(0, math::atan(0.0), "atan(0.0) should return 0.0")
t.assert_float_equals(1.0, math::sin(math::PI / 2), 0.0001, "sin(PI/2) should be approximately 1.0")
t.assert_float_equals(0.0, math::cos(math::PI / 2), 0.0001, "cos(PI/2) should be approximately 0.0")
t.assert_float_equals(1.0, math::tan(math::PI / 4), 0.0001, "tan(PI/4) should be approximately 1.0")
t.assert_float_equals(2.718282, math::exp(1.0), 0.0000001, "exp(1.0) should be approximately e")
t.assert_float_equals(0.0, math::ln(1.0), 0.0000001, "ln(1.0) should be approximately 0.0")

# String Tests
t.assert_equals(0, strings::compare("Hello, World!", "Hello, World!"), "String comparison should be equal")
t.assert_equals(5, strings::length("Hello"), "String length should be 5")

# OS Tests
os::exec("echo ASSERT PASSED: OS call worked")
print "ASSERT PASSED: Currently directory correctly detected as: %s" | os::cwd()
print "ASSERT PASSED: Home directory detected as: %s" | os::homedir()

t.test_summary()

os::exit(0)
