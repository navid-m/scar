import "std/collections"
import "std/math"
import "std/strings"
import "std/test"
import "std/os"
import "std/path"
import "std/random"
import "std/log"
import "std/time"
import "std/fs"

# Setup
var list = new collections::ArrayList(4)

list.add_element(10)
list.add_element(20)
list.add_element(30)

var t = new test::UnitTest()
i32 size = list.get_size()

# Collections Tests
t.assert_equals(3, size, "List size should be 3")

# Math Tests
t.assert_float_equals(3.14, math::round(3.14159265359, 2), 0.01, "Rounding error should be within tolerance")
t.assert_equals(0, math::asin(2.0), "asin(2.0) should return 0.0")
t.assert_equals(0, math::acos(2.0), "acos(2.0) should return 0.0")
t.assert_equals(0, math::atan(0.0), "atan(0.0) should return 0.0")
t.assert_float_equals(1.0, math::sin(math::PI / 2), 0.0001, "sin(PI/2) should be approximately 1.0")
t.assert_float_equals(0.0, math::cos(math::PI / 2), 0.0001, "cos(PI/2) should be approximately 0.0")
t.assert_float_equals(1.0, math::tan(math::PI / 4), 0.0001, "tan(PI/4) should be approximately 1.0")
t.assert_float_equals(2.718282, math::exp(1.0), 0.0000001, "exp(1.0) should be approximately e")
t.assert_float_equals(0.0, math::ln(1.0), 0.0000001, "ln(1.0) should be approximately 0.0")
t.assert_equals(123, math::to_int("123"), "to_int should return 123")

# String Tests
t.assert_equals(0, strings::compare("Hello, World!", "Hello, World!"), "String comparison should be equal")
t.assert_equals(5, strings::length("Hello"), "String length should be 5")

# OS Tests
# os::exec("echo ASSERT PASSED: OS call worked")
log::success(fmt!("ASSERT PASSED: Currently directory correctly detected as: %s", os::cwd()))
log::success(fmt!("ASSERT PASSED: Home directory detected as: %s", os::homedir()))
log::success(fmt!("ASSERT PASSED: Temporary directory detected as: %s", os::tempdir()))

# Path Tests
t.assert_equals(true, path::is_absolute_path("/absolute/path"), "Path should be absolute")
t.assert_equals(false, path::is_absolute_path("relative/path"), "Path should not be absolute")
t.assert_string_equals("txt", path::extension("file.txt"), "File extension should be 'txt'")
t.assert_string_equals("/base/path/file.txt", path::join("/base/path", "file.txt"), "Join should produce correct path")
t.assert_string_equals("file.txt", path::basename("/base/path/file.txt"), "Basename should be 'file.txt'")
t.assert_string_equals("/base/path", path::dirname("/base/path/file.txt"), "Dirname should be '/base/path'")

# Random Tests
t.assert_equals(6, strings::length(random::uuid(7)), "UUID length should be 6 characters")

log::success(fmt!("ASSERT PASSED: Generated UUID: %s", random::uuid(12)))
log::success(fmt!("ASSERT PASSED: Random number between 1 and 10: %d", random::num(1, 10)))
log::success(fmt!("ASSERT PASSED: Random float between 0.0 and 111.0: %f", random::float_range(0.0, 111.0)))
log::success(fmt!("ASSERT PASSED: Random float between 0 and 1: %f", random::floatb(0.0, 1.0)))
log::success(fmt!("ASSERT PASSED: Current timestamp: %d", time::timestamp()))
log::success(fmt!("ASSERT PASSED: Current time: %s", time::format_date(time::now())))

collections::StringArrayList strList = new collections::StringArrayList(5)

strList.add_element("hello")
strList.add_element("world")
strList.add_element("scar")

# -1 is lost in the generated C.
i32 max = strList.get_size() - 1

for i = 0 to max:
    string x = strList.get_element(i)
    log::success(fmt!("ASSERT PASSED: Got list item: %s", x))

write("Hello World", "output.txt", overwrite!)
string data = read("output.txt")
t.assert_string_equals("Hello World", data, "Read data should be 'Hello World'")
list[string] otherdata = fs::read_lines("output.txt")
t.assert_string_equals("Hello World", otherdata[0], "First line should be 'Hello World'")
fs::remove("output.txt")

list[string] args = os::get_args()
for i = 0 to len(args) - 1:
    log::success(fmt!("ASSERT PASSED: Command line argument %d: %s", i, args[i]))

t.test_summary()

os::exit(0)
