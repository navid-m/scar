import "std/math"
import "std/strings"

pub class UnitTest:
    init:
        int this.tests_run = 0
        int this.tests_failed = 0

    fn assert(bool condition, string message) -> void:
        this.tests_run = this.tests_run + 1
        if !condition:
            this.tests_failed = this.tests_failed + 1
            print "\033[0;31mASSERT FAILED: %s\033[0m\n" | message
        else:
            print "\033[0;32mASSERT PASSED: %s\033[0m\n" | message

    fn assert_equals(int expected, int actual, string message) -> void:
        this.tests_run = this.tests_run + 1
        if expected != actual:
            this.tests_failed = this.tests_failed + 1
            print "\033[0;31mASSERT FAILED: %s (Expected %d, got %d)\033[0m" | message, expected, actual
        else:
            print "\033[0;32mASSERT PASSED: %s\033[0m" | message

    fn assert_string_equals(string expected, string actual, string message) -> void:
        this.tests_run = this.tests_run + 1
        if strings::compare(expected, actual) != 0:
            this.tests_failed = this.tests_failed + 1
            print "\033[0;31mASSERT FAILED: %s (Expected '%s', got '%s')\033[0m" | message, expected, actual
        else:
            print "\033[0;32mASSERT PASSED: %s\033[0m" | message

    fn assert_int_equals(int expected, int actual, string message) -> void:
        this.tests_run = this.tests_run + 1
        if expected != actual:
            this.tests_failed = this.tests_failed + 1
            print "\033[0;31mASSERT FAILED: %s (Expected '%s', got '%s')\033[0m" | message, expected, actual
        else:
            print "\033[0;32mASSERT PASSED: %s (Expected '%s', got '%s')\033[0m" | message, expected, actual
    
    fn assert_float_equals(float expected, float actual, float tolerance, string message) -> void:
        this.tests_run = this.tests_run + 1
        if math::absolute(expected - actual) > tolerance:
            this.tests_failed = this.tests_failed + 1
            print "\033[0;31mASSERT FAILED: %s (Expected %.6f, got %.6f)\033[0m" | message, expected, actual
        else:
            print "\033[0;32mASSERT PASSED: %s\033[0m" | message

    fn assert_true(bool condition, string message) -> void:
        this.assert(condition, message)

    fn assert_false(bool condition, string message) -> void:
        this.assert(!condition, message)

    fn assert_int_list_equals(ref list[int] expected, ref list[int] actual, string message) -> void:
        this.tests_run = this.tests_run + 1
        
        if len(expected) != len(actual):
            this.tests_failed = this.tests_failed + 1
            print "\033[0;31mASSERT FAILED: %s (Expected list length %d, got %d)\033[0m" | message, len(expected), len(actual)
            return
        
        bool lists_equal = true
        for i = 0 to len(expected) - 1:
            if expected[i] != actual[i]:
                lists_equal = false
                break
        
        if !lists_equal:
            this.tests_failed = this.tests_failed + 1
            print "\033[0;31mASSERT FAILED: %s (Lists are not equal)\033[0m" | message
        else:
            print "\033[0;32mASSERT PASSED: %s\033[0m" | message

    fn test_summary() -> void:
        print "\nTests run: %d, Failures: %d" | this.tests_run, this.tests_failed
        if this.tests_failed == 0:
            print "All tests passed."
        else:
            print "Some tests failed."
