# The raw blocks are temporary.
# TODO: Remove them.

pub class ArrayList:
    init:
        int this.size = 0
        int this.capacity = 10
        ref int this.data = nil
        $raw (
            this->data = malloc(this->capacity * sizeof(int));
        )
    
    init(int initial_capacity):
        this.size = 0
        this.capacity = initial_capacity
        ref int this.data = nil
        $raw (
            this->data = malloc(this->capacity * sizeof(int));
        )
    
    fn add_element(int value) -> void:
        if this.size >= this.capacity:
            this.resize()
        $raw (
            ((int*)this->data)[this->size] = value;
        )
        this.size = this.size + 1
    
    fn get_element(int index) -> int:
        if index < 0 || index >= this.size:
            return -1
        $raw (
            return ((int*)this->data)[index];
        )
    
    fn set_element(int index, int value) -> void:
        if index >= 0 && index < this.size:
            $raw (
                ((int*)this->data)[index] = value;
            )
    
    fn get_size() -> int:
        return this.size
    
    fn resize() -> void:
        this.capacity = this.capacity * 2
        $raw (
            this->data = realloc(this->data, this->capacity * sizeof(int));
        )
    
# Example usage:

# var list = new ArrayList(4)

# list.add_element(10)
# list.add_element(20)
# list.add_element(30)

# for i = 0 to list.get_size() - 1:
#     int val = list.get_element(i)
#     print "Element %d = %d" | i, val
