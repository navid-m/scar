# The raw blocks are temporary.
# TODO: Remove them.

pub class ArrayList:
    init:
        int this.size = 0
        int this.capacity = 10
        ref void this.data = nil 
        $raw (
            this->data = malloc(this->capacity * sizeof(void*));
        )
    
    init(int initial_capacity):
        this.size = 0
        this.capacity = initial_capacity
        ref void this.data = nil 
        $raw (
            this->data = malloc(this->capacity * sizeof(void*));
        )
    
    fn add_element(int value) -> void:
        if this.size >= this.capacity:
            this.resize()
        $raw (
            ((void**)this->data)[this->size] = malloc(sizeof(int));
            *((int*)((void**)this->data)[this->size]) = value;
        )
        this.size = this.size + 1
    
    fn get_element(int index) -> int:
        if index < 0 || index >= this.size:
            return -1
        $raw (
            return *((int*)((void**)this->data)[index]);
        )
    
    fn set_element(int index, int value) -> void:
        if index >= 0 && index < this.size:
            $raw (
                *((int*)((void**)this->data)[index]) = value;
            )
    
    fn get_size() -> int:
        return this.size
    
    fn resize() -> void:
        this.capacity = this.capacity * 2
        $raw (
            this->data = realloc(this->data, this->capacity * sizeof(void*));
        )
