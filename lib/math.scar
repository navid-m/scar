pub float PI = 3.14159265359
pub float E = 2.71828182846
pub int MAX_INT = 2147483647
pub int MIN_INT = -2147483648

pub fn to_int(string value) -> int:
    int i = 0
    int result = 0
    int sign = 1
    int len = len(value)

    while i < len && (value[i] == ' ' || value[i] == '\t' || value[i] == '\n'):
        i = i + 1
    if i < len && value[i] == '-':
        sign = -1
        i = i + 1
    elif i < len && value[i] == '+':
        i = i + 1
    while i < len && value[i] >= '0' && value[i] <= '9':
        result = result * 10 + (ord(value[i]) - ord('0'))
        i = i + 1

    return result * sign

pub fn to_float(string value) -> float:
    int i = 0
    float result = 0.0
    int sign = 1
    float fraction = 0.0
    float divisor = 10.0
    int len = len(value)

    while i < len  && (value[i] == ' ' || value[i] == '\t' || value[i] == '\n'):
        i = i + 1
        if i < len  && value[i] == '-':
            sign = -1
            i = i + 1
        elif i < len  && value[i] == '+':
            i = i + 1

    while i < len && value[i] >= '0' && value[i] <= '9':
        result = (result * 10.0) + float(ord(value[i]) - ord('0'))
        i = i + 1

    if i < len && value[i] == '.':
        i = i + 1
        while i < len  && value[i] >= '0'  && value[i] <= '9':
            fraction = fraction + (float(ord(value[i]) - ord('0')) / divisor)
            divisor = divisor * 10.0
            i = i + 1

    return float(sign) * (result + fraction)

pub fn min(int a, int b) -> int:
    if a < b:
        return a
    return b

pub fn max(int a, int b) -> int:
    if a > b:
        return a
    return b

pub fn absolute(float value) -> float:
    if value < 0.0:
        return -value
    return value

pub fn pow(float base, int exp) -> float:
    float result = 1.0
    int i = 0
    if exp < 0:
        return 1.0 / pow(base, -exp)
    for i = 0 to exp - 1:
        result = result * base
    return result

pub fn factorial(int n) -> int:
    if n < 0:
        return -1
    int result = 1
    for i = 2 to n:
        result = result * i
    return result

pub fn clamp(float value, float min_value, float max_value) -> float:
    if value < min_value:
        return min_value
    elif value > max_value:
        return max_value
    return value

pub fn normalize(float x) -> float:
    while x > PI:
        x = x - 2.0 * PI
    while x < -PI:
        x = x + 2.0 * PI
    return x

pub fn sin(float x) -> float:
    x = normalize(x)
    float term = x
    float result = x
    float x_squared = x * x
    int i = 1
    int sign = -1
    while i < 10:
        term = term * x_squared / float((2 * i) * (2 * i + 1))
        result = result + float(sign) * term
        sign = -sign
        i = i + 1
    return result

pub fn cos(float x) -> float:
    x = normalize(x)
    float term = 1.0
    float result = 1.0
    float x_squared = x * x
    int i = 1
    int sign = -1
    while i < 10:
        term = term * x_squared / float((2 * i - 1) * (2 * i))
        result = result + float(sign) * term
        sign = -sign
        i = i + 1
    return result

pub fn tan(float x) -> float:
    float cos_x = cos(x)
    if absolute(cos_x) < 0.00001:
        print "Warning: tan() undefined at x = %.5f" | x
        return 0.0
    return sin(x) / cos_x
