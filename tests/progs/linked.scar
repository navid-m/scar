class Node:
    init(int value, bool has_next):
        int this.value = value
        bool this.has_next = has_next
        ref Node this.next = NULL

class LinkedList:
    init:
        ref Node this.head = NULL

    fn append(int value) -> void:
        var new_node = new Node(value, false)
        new_node.next = NULL

        if this.head == NULL:
            this.head = new_node
            print "Inserted %d as head" | value
            return 0

        var current = this.head
        while current.has_next != NULL:
            current = current.next

        current.next = new_node
        current.has_next = true
        print "Appended %d to list" | value

    fn print_list() -> void:
        var current = this.head
        int index = 0

        while current != NULL:
            print "Node %d: %d" | index, current.value
            if current.has_next:
                current = current.next
            else:
                break
            index = index + 1
